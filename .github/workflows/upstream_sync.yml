name: Sync Upstream SOFA Data

on:
  schedule:
    # Run every hour during business hours for critical updates
    - cron: '0 17-20 * * 1,2,3,4,5'
    # Run every 4 hours otherwise
    - cron: '30 */4 * * *'
  workflow_dispatch:

jobs:
  sync-upstream:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize empty files if needed
      run: |
        if [ -f "init-empty-files.sh" ]; then
          chmod +x init-empty-files.sh
          ./init-empty-files.sh
        fi

    - name: Create directories
      run: |
        mkdir -p v1 public/v1 cache

    - name: Fetch upstream feeds and cache
      run: |
        # Fetch main feed files
        echo "Fetching upstream feeds..."
        
        # Use curl with error handling
        if curl -sS https://sofafeed.macadmins.io/v1/macos_data_feed.json -o v1/macos_data_feed.json; then
          echo "✓ macOS feed fetched successfully"
        else
          echo "⚠ Failed to fetch macOS feed"
        fi
        
        if curl -sS https://sofafeed.macadmins.io/v1/ios_data_feed.json -o v1/ios_data_feed.json; then
          echo "✓ iOS feed fetched successfully"
        else
          echo "⚠ Failed to fetch iOS feed"
        fi
        
        if curl -sS https://sofafeed.macadmins.io/v1/timestamp.json -o v1/timestamp.json; then
          echo "✓ Timestamp fetched successfully"
        else
          echo "⚠ Failed to fetch timestamp"
        fi
        
        if curl -sS https://sofafeed.macadmins.io/v1/rss_feed.xml -o v1/rss_feed.xml; then
          echo "✓ RSS feed fetched successfully"
        else
          echo "⚠ Failed to fetch RSS feed"
        fi
        
        # Try to fetch cache files (these URLs might not be publicly accessible)
        echo "Attempting to fetch cache files..."
        
        # Function to safely fetch and validate JSON
        fetch_json() {
          local url=$1
          local output=$2
          local temp_file="${output}.tmp"
          
          if curl -sS "$url" -o "$temp_file" 2>/dev/null; then
            # Check if it's valid JSON and not HTML
            if jq empty "$temp_file" 2>/dev/null && ! grep -q "<!DOCTYPE html>" "$temp_file" && ! grep -q "<html" "$temp_file"; then
              mv "$temp_file" "$output"
              echo "✓ Fetched valid JSON: $output"
            else
              rm -f "$temp_file"
              echo "✗ Invalid response for $output (not JSON or contains HTML)"
            fi
          else
            rm -f "$temp_file"
            echo "✗ Failed to fetch $output"
          fi
        }
        
        # Fetch cache files with validation
        fetch_json "https://sofa.macadmins.io/cache/cve_details.json" "cache/cve_details.json"
        fetch_json "https://sofa.macadmins.io/cache/essential_links.json" "cache/essential_links.json"
        fetch_json "https://sofa.macadmins.io/cache/supported_devices.json" "cache/supported_devices.json"
        
        # Copy to public directory
        cp v1/*.json public/v1/ || true
        cp v1/*.xml public/v1/ || true

    - name: Replace macadmins URLs with 2fifteen URLs
      run: |
        # Replace all macadmins.io URLs with 2fifteen.io URLs in fetched data
        echo "Replacing macadmins URLs with 2fifteen URLs..."
        
        # Replace in JSON files
        find v1 public/v1 cache -name "*.json" -type f -exec sed -i 's|https://sofa\.macadmins\.io|https://sofa.2fifteen.io|g' {} +
        find v1 public/v1 cache -name "*.json" -type f -exec sed -i 's|https://sofafeed\.macadmins\.io|https://sofa.2fifteen.io|g' {} +
        
        # Replace in XML/RSS files
        find v1 public/v1 -name "*.xml" -type f -exec sed -i 's|https://sofa\.macadmins\.io|https://sofa.2fifteen.io|g' {} +
        find v1 public/v1 -name "*.xml" -type f -exec sed -i 's|https://sofafeed\.macadmins\.io|https://sofa.2fifteen.io|g' {} +
        
        echo "✓ URL replacement complete"

    - name: Validate and fix JSON files
      run: |
        # Run the validation script to ensure all JSON files are valid
        if [ -f "validate-json-files.sh" ]; then
          chmod +x validate-json-files.sh
          ./validate-json-files.sh
        fi
        
    - name: Verify data integrity
      run: |
        # Check if essential files exist and are valid JSON
        for file in v1/macos_data_feed.json v1/ios_data_feed.json v1/timestamp.json; do
          if [ -f "$file" ] && [ -s "$file" ]; then
            if jq empty "$file" 2>/dev/null; then
              echo "✓ $file is valid JSON"
              # Also check that it contains actual data
              if [[ "$file" == *"_data_feed.json" ]]; then
                # Check if the array has elements
                count=$(jq '. | length' "$file" 2>/dev/null || echo "0")
                if [ "$count" -gt 0 ]; then
                  echo "  Contains $count items"
                else
                  echo "  ⚠ WARNING: Feed is empty array"
                fi
              fi
            else
              echo "✗ $file is invalid JSON - skipping to avoid data loss"
              # Don't overwrite with empty JSON - let the build fail instead
              exit 1
            fi
          else
            echo "✗ $file is missing or empty - sync may have failed"
            # Don't create empty files - let the build fail instead
            exit 1
          fi
        done

    - name: Commit and push if changes detected
      run: |
        git config --global user.name 'github-actions'
        git config --global user.email 'github-actions@github.com'
        
        # Add files with error handling
        git add v1/* public/v1/* cache/* || true
        
        # Check if there are any changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Sync upstream SOFA data - $(date +'%Y-%m-%d %H:%M:%S')"
          git push
          echo "Changes committed and pushed"
        fi